import { BehaviorSubject, Subject, of, EMPTY } from 'rxjs';
import { delay, filter, switchMap, tap } from 'rxjs/operators';
import { defaultState } from '../utils/gallery.default';
import { GalleryAction } from '../models/constants';
import { IframeItem, ImageItem, VideoItem, YoutubeItem } from '../components/templates/items.model';
const filterActions = (actions) => {
    return filter((state) => actions.indexOf(state.action) > -1);
};
export class GalleryRef {
    constructor(config, deleteInstance) {
        this.deleteInstance = deleteInstance;
        /** Stream that emits on item click */
        this.itemClick = new Subject();
        /** Stream that emits on thumbnail click */
        this.thumbClick = new Subject();
        /** Stream that emits on an error occurs */
        this.error = new Subject();
        this._state = new BehaviorSubject(defaultState);
        this._config = new BehaviorSubject(config);
        this.state = this._state.asObservable();
        this.config = this._config.asObservable();
    }
    get stateSnapshot() {
        return this._state.value;
    }
    get configSnapshot() {
        return this._config.value;
    }
    /** Stream that emits when gallery is initialized/reset */
    get initialized() {
        return this.state.pipe(filterActions([GalleryAction.INITIALIZED]));
    }
    /** Stream that emits when items is changed (items loaded, item added, item removed) */
    get itemsChanged() {
        return this.state.pipe(filterActions([GalleryAction.ITEMS_CHANGED]));
    }
    /** Stream that emits when current item is changed */
    get indexChanged() {
        return this.state.pipe(filterActions([GalleryAction.INDEX_CHANGED]));
    }
    /** Stream that emits when the player should start or stop */
    get playingChanged() {
        return this.state.pipe(filterActions([GalleryAction.PLAY, GalleryAction.STOP]));
    }
    /** Stream that emits when the player should start or stop */
    get playerActions() {
        return this.state.pipe(filterActions([GalleryAction.PLAY, GalleryAction.STOP, GalleryAction.INDEX_CHANGED]));
    }
    /**
     * Activate player actions listener
     */
    activatePlayer() {
        return this.playerActions.pipe(switchMap((e) => e.isPlaying ? of({}).pipe(delay(this._config.value.playerInterval), tap(() => this.next(this._config.value.scrollBehavior))) : EMPTY));
    }
    /**
     * Set gallery state
     */
    setState(state) {
        this._state.next({ ...this.stateSnapshot, ...state });
    }
    /**
     * Set gallery config
     */
    setConfig(config) {
        this._config.next({ ...this._config.value, ...config });
    }
    /**
     * Add gallery item
     */
    add(item, active) {
        const items = [...this.stateSnapshot.items, item];
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items,
            hasNext: items.length > 1,
            currIndex: active ? items.length - 1 : this.stateSnapshot.currIndex
        });
    }
    /**
     * Add image item
     */
    addImage(data, active) {
        this.add(new ImageItem(data), active);
    }
    /**
     * Add video item
     */
    addVideo(data, active) {
        this.add(new VideoItem(data), active);
    }
    /**
     * Add iframe item
     */
    addIframe(data, active) {
        this.add(new IframeItem(data), active);
    }
    /**
     * Add youtube item
     */
    addYoutube(data, active) {
        this.add(new YoutubeItem(data), active);
    }
    /**
     * Remove gallery item
     */
    remove(i) {
        const state = this.stateSnapshot;
        const items = [
            ...state.items.slice(0, i),
            ...state.items.slice(i + 1, state.items.length)
        ];
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            currIndex: i < 1 ? state.currIndex : i - 1,
            items,
            hasNext: items.length > 1,
            hasPrev: i > 0
        });
    }
    /**
     * Load items and reset the state
     */
    load(items) {
        if (items) {
            this.setState({
                action: GalleryAction.ITEMS_CHANGED,
                items,
                hasNext: items.length > 1,
                hasPrev: false
            });
        }
    }
    /**
     * Set active item
     */
    set(i, behavior = this._config.value.scrollBehavior) {
        if (i < 0 || i >= this.stateSnapshot.items.length) {
            console.error(`[NgGallery]: Unable to set the active item because the given index (${i}) is outside the items range!`);
            return;
        }
        if (i !== this.stateSnapshot.currIndex) {
            this.setState({
                behavior,
                action: GalleryAction.INDEX_CHANGED,
                currIndex: i,
                hasNext: i < this.stateSnapshot.items.length - 1,
                hasPrev: i > 0
            });
        }
    }
    /**
     * Next item
     */
    next(behavior = this._config.value.scrollBehavior, loop = true) {
        if (this.stateSnapshot.hasNext) {
            this.set(this.stateSnapshot.currIndex + 1, behavior);
        }
        else if (loop && this._config.value.loop) {
            this.set(0, behavior);
        }
    }
    /**
     * Prev item
     */
    prev(behavior = this._config.value.scrollBehavior, loop = true) {
        if (this.stateSnapshot.hasPrev) {
            this.set(this.stateSnapshot.currIndex - 1, behavior);
        }
        else if (loop && this._config.value.loop) {
            this.set(this.stateSnapshot.items.length - 1, behavior);
        }
    }
    /**
     * Start gallery player
     */
    play(interval) {
        if (interval) {
            this.setConfig({ playerInterval: interval });
        }
        this.setState({ action: GalleryAction.PLAY, isPlaying: true });
    }
    /**
     * Stop gallery player
     */
    stop() {
        this.setState({ action: GalleryAction.STOP, isPlaying: false });
    }
    /**
     * Reset gallery to initial state
     */
    reset() {
        this.setState(defaultState);
    }
    /**
     * Destroy gallery
     */
    destroy() {
        this._state.complete();
        this._config.complete();
        this.itemClick.complete();
        this.thumbClick.complete();
        this.deleteInstance();
    }
}
//# sourceMappingURL=data:application/json;base64,