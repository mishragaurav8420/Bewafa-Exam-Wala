import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class GalleryVideoComponent {
    constructor() {
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    set pauseVideo(shouldPause) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPause && !video.paused) {
                video.pause();
            }
        }
    }
    set playVideo(shouldPlay) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPlay) {
                video.play();
            }
        }
    }
    ngOnInit() {
        if (this.src instanceof Array) {
            // If video has multiple sources
            this.videoSources = [...this.src];
        }
        else {
            this.videoSources = [{ url: this.src }];
        }
    }
}
GalleryVideoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: GalleryVideoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
GalleryVideoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.5", type: GalleryVideoComponent, selector: "gallery-video", inputs: { src: "src", poster: "poster", mute: "mute", loop: "loop", controls: "controls", controlsList: "controlsList", disableRemotePlayback: "disableRemotePlayback", disablePictureInPicture: "disablePictureInPicture", pauseVideo: ["pause", "pauseVideo"], playVideo: ["play", "playVideo"] }, outputs: { error: "error" }, viewQueries: [{ propertyName: "video", first: true, predicate: ["video"], descendants: true, static: true }], ngImport: i0, template: `
    <video #video
           [attr.mute]="mute"
           [attr.controlsList]="controlsList"
           [attr.disablePictureInPicture]="disablePictureInPicture"
           [disableRemotePlayback]="disableRemotePlayback"
           [controls]="controls"
           [loop]="loop"
           [poster]="poster"
           (error)="error.emit($event)">
      <ng-container *ngFor="let src of videoSources">
        <source *ngIf="src?.type; else noType" [src]="src?.url" [type]="src.type"/>
        <ng-template #noType>
          <source [src]="src?.url"/>
        </ng-template>
      </ng-container>
    </video>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: GalleryVideoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-video',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <video #video
           [attr.mute]="mute"
           [attr.controlsList]="controlsList"
           [attr.disablePictureInPicture]="disablePictureInPicture"
           [disableRemotePlayback]="disableRemotePlayback"
           [controls]="controls"
           [loop]="loop"
           [poster]="poster"
           (error)="error.emit($event)">
      <ng-container *ngFor="let src of videoSources">
        <source *ngIf="src?.type; else noType" [src]="src?.url" [type]="src.type"/>
        <ng-template #noType>
          <source [src]="src?.url"/>
        </ng-template>
      </ng-container>
    </video>
  `
                }]
        }], propDecorators: { src: [{
                type: Input
            }], poster: [{
                type: Input
            }], mute: [{
                type: Input
            }], loop: [{
                type: Input
            }], controls: [{
                type: Input
            }], controlsList: [{
                type: Input
            }], disableRemotePlayback: [{
                type: Input
            }], disablePictureInPicture: [{
                type: Input
            }], pauseVideo: [{
                type: Input,
                args: ['pause']
            }], playVideo: [{
                type: Input,
                args: ['play']
            }], error: [{
                type: Output
            }], video: [{
                type: ViewChild,
                args: ['video', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS12aWRlby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS12aWRlby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxTQUFTLEVBQWMsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQXdCL0gsTUFBTSxPQUFPLHFCQUFxQjtJQXRCbEM7UUFxREUsNkNBQTZDO1FBQ25DLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBYyxDQUFDO0tBWWxEO0lBL0JDLElBQW9CLFVBQVUsQ0FBQyxXQUFvQjtRQUNqRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQzVCLE1BQU0sS0FBSyxHQUFxQixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztZQUN6RCxJQUFJLFdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ2hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNmO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsSUFBbUIsU0FBUyxDQUFDLFVBQW1CO1FBQzlDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDNUIsTUFBTSxLQUFLLEdBQXFCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ3pELElBQUksVUFBVSxFQUFFO2dCQUNkLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNkO1NBQ0Y7SUFDSCxDQUFDO0lBT0QsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLEdBQUcsWUFBWSxLQUFLLEVBQUU7WUFDN0IsZ0NBQWdDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQzs7a0hBM0NVLHFCQUFxQjtzR0FBckIscUJBQXFCLHFlQW5CdEI7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJUOzJGQUVVLHFCQUFxQjtrQkF0QmpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJUO2lCQUNGOzhCQUtVLEdBQUc7c0JBQVgsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0cscUJBQXFCO3NCQUE3QixLQUFLO2dCQUNHLHVCQUF1QjtzQkFBL0IsS0FBSztnQkFFYyxVQUFVO3NCQUE3QixLQUFLO3VCQUFDLE9BQU87Z0JBU0ssU0FBUztzQkFBM0IsS0FBSzt1QkFBQyxNQUFNO2dCQVVILEtBQUs7c0JBQWQsTUFBTTtnQkFFK0IsS0FBSztzQkFBMUMsU0FBUzt1QkFBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LXZpZGVvJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPHZpZGVvICN2aWRlb1xyXG4gICAgICAgICAgIFthdHRyLm11dGVdPVwibXV0ZVwiXHJcbiAgICAgICAgICAgW2F0dHIuY29udHJvbHNMaXN0XT1cImNvbnRyb2xzTGlzdFwiXHJcbiAgICAgICAgICAgW2F0dHIuZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVdPVwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVcIlxyXG4gICAgICAgICAgIFtkaXNhYmxlUmVtb3RlUGxheWJhY2tdPVwiZGlzYWJsZVJlbW90ZVBsYXliYWNrXCJcclxuICAgICAgICAgICBbY29udHJvbHNdPVwiY29udHJvbHNcIlxyXG4gICAgICAgICAgIFtsb29wXT1cImxvb3BcIlxyXG4gICAgICAgICAgIFtwb3N0ZXJdPVwicG9zdGVyXCJcclxuICAgICAgICAgICAoZXJyb3IpPVwiZXJyb3IuZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHNyYyBvZiB2aWRlb1NvdXJjZXNcIj5cclxuICAgICAgICA8c291cmNlICpuZ0lmPVwic3JjPy50eXBlOyBlbHNlIG5vVHlwZVwiIFtzcmNdPVwic3JjPy51cmxcIiBbdHlwZV09XCJzcmMudHlwZVwiLz5cclxuICAgICAgICA8bmctdGVtcGxhdGUgI25vVHlwZT5cclxuICAgICAgICAgIDxzb3VyY2UgW3NyY109XCJzcmM/LnVybFwiLz5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvdmlkZW8+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeVZpZGVvQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgdmlkZW9Tb3VyY2VzOiB7IHVybDogc3RyaW5nLCB0eXBlPzogc3RyaW5nIH1bXTtcclxuXHJcbiAgQElucHV0KCkgc3JjOiBzdHJpbmcgfCB7IHVybDogc3RyaW5nLCB0eXBlPzogc3RyaW5nIH1bXTtcclxuICBASW5wdXQoKSBwb3N0ZXI6IHN0cmluZztcclxuICBASW5wdXQoKSBtdXRlOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGxvb3A6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgY29udHJvbHM6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgY29udHJvbHNMaXN0OiAnbm9kb3dubG9hZCcgfCAnbm9mdWxsc2NyZWVuJyB8ICdub3JlbW90ZXBsYXliYWNrJztcclxuICBASW5wdXQoKSBkaXNhYmxlUmVtb3RlUGxheWJhY2s6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmU6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgncGF1c2UnKSBzZXQgcGF1c2VWaWRlbyhzaG91bGRQYXVzZTogYm9vbGVhbikge1xyXG4gICAgaWYgKHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICBjb25zdCB2aWRlbzogSFRNTFZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudDtcclxuICAgICAgaWYgKHNob3VsZFBhdXNlICYmICF2aWRlby5wYXVzZWQpIHtcclxuICAgICAgICB2aWRlby5wYXVzZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3BsYXknKSBzZXQgcGxheVZpZGVvKHNob3VsZFBsYXk6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgY29uc3QgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgIGlmIChzaG91bGRQbGF5KSB7XHJcbiAgICAgICAgdmlkZW8ucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cclxuICBAT3V0cHV0KCkgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yRXZlbnQ+KCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3ZpZGVvJywgeyBzdGF0aWM6IHRydWUgfSkgdmlkZW86IEVsZW1lbnRSZWY7XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMuc3JjIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgLy8gSWYgdmlkZW8gaGFzIG11bHRpcGxlIHNvdXJjZXNcclxuICAgICAgdGhpcy52aWRlb1NvdXJjZXMgPSBbLi4udGhpcy5zcmNdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52aWRlb1NvdXJjZXMgPSBbeyB1cmw6IHRoaXMuc3JjIH1dO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=