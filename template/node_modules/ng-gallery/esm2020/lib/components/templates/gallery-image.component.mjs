import { Component, Input, Output, HostBinding, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { imageFailedSvg } from './svg-assets';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
export class GalleryImageComponent {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        this.state = 'loading';
        /** Progress value */
        this.progress = 0;
        this.errorIcon = imageFailedSvg;
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
        this.loaded = new EventEmitter();
    }
    get imageState() {
        return this.state;
    }
    ngOnInit() {
        if (this.loadingIcon) {
            this.loaderTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
        if (this.loadingError) {
            this.errorTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingError);
        }
        if (this.errorIcon) {
            this.errorSvg = this._sanitizer.bypassSecurityTrustHtml(this.errorIcon);
        }
    }
}
GalleryImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: GalleryImageComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
GalleryImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.5", type: GalleryImageComponent, selector: "gallery-image", inputs: { isThumbnail: "isThumbnail", loadingAttr: "loadingAttr", alt: "alt", src: "src", loadingIcon: "loadingIcon", loadingError: "loadingError", errorIcon: "errorIcon" }, outputs: { error: "error", loaded: "loaded" }, host: { properties: { "attr.imageState": "this.imageState" } }, ngImport: i0, template: `
    <ng-container [ngSwitch]="state">
      <img [@fadeIn]="state"
           [src]="src"
           [attr.alt]="alt"
           [attr.loading]="loadingAttr"
           [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
           class="g-image-item"
           (load)="state = 'success'; loaded.emit()"
           (error)="state = 'failed'; error.emit($event)"/>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>
              <div class="gallery-thumb-error" [innerHTML]="errorSvg"></div>
            </h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>
              <div class="gallery-image-error" [innerHTML]="errorSvg"></div>
            </h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], animations: [
        trigger('fadeIn', [
            transition('* => success', [
                style({ opacity: 0 }),
                animate('300ms ease-in', style({ opacity: 1 }))
            ])
        ])
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: GalleryImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-image',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [
                        trigger('fadeIn', [
                            transition('* => success', [
                                style({ opacity: 0 }),
                                animate('300ms ease-in', style({ opacity: 1 }))
                            ])
                        ])
                    ],
                    template: `
    <ng-container [ngSwitch]="state">
      <img [@fadeIn]="state"
           [src]="src"
           [attr.alt]="alt"
           [attr.loading]="loadingAttr"
           [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
           class="g-image-item"
           (load)="state = 'success'; loaded.emit()"
           (error)="state = 'failed'; error.emit($event)"/>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>
              <div class="gallery-thumb-error" [innerHTML]="errorSvg"></div>
            </h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>
              <div class="gallery-image-error" [innerHTML]="errorSvg"></div>
            </h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { isThumbnail: [{
                type: Input
            }], loadingAttr: [{
                type: Input
            }], alt: [{
                type: Input
            }], src: [{
                type: Input
            }], loadingIcon: [{
                type: Input
            }], loadingError: [{
                type: Input
            }], errorIcon: [{
                type: Input
            }], error: [{
                type: Output
            }], loaded: [{
                type: Output
            }], imageState: [{
                type: HostBinding,
                args: ['attr.imageState']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxZQUFZLEVBRVosdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7O0FBd0Q5QyxNQUFNLE9BQU8scUJBQXFCO0lBeUNoQyxZQUFvQixVQUF3QjtRQUF4QixlQUFVLEdBQVYsVUFBVSxDQUFjO1FBdkM1QyxVQUFLLEdBQXFDLFNBQVMsQ0FBQztRQUVwRCxxQkFBcUI7UUFDckIsYUFBUSxHQUFXLENBQUMsQ0FBQztRQXdCWixjQUFTLEdBQVcsY0FBYyxDQUFDO1FBRzVDLDZDQUE2QztRQUNuQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQztRQUV2QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQU81QyxDQUFDO0lBTEQsSUFBb0MsVUFBVTtRQUM1QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUtELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNqRjtRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pGO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDekU7SUFDSCxDQUFDOztrSEF0RFUscUJBQXFCO3NHQUFyQixxQkFBcUIsa1ZBM0N0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdDVCw4VUFoRFc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2hCLFVBQVUsQ0FBQyxjQUFjLEVBQUU7Z0JBQ3pCLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDckIsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNoRCxDQUFDO1NBQ0gsQ0FBQztLQUNIOzJGQTRDVSxxQkFBcUI7a0JBdERqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsVUFBVSxFQUFFO3dCQUNWLE9BQU8sQ0FBQyxRQUFRLEVBQUU7NEJBQ2hCLFVBQVUsQ0FBQyxjQUFjLEVBQUU7Z0NBQ3pCLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztnQ0FDckIsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzs2QkFDaEQsQ0FBQzt5QkFDSCxDQUFDO3FCQUNIO29CQUNELFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdDVDtpQkFDRjttR0FVVSxXQUFXO3NCQUFuQixLQUFLO2dCQUdHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBR0csR0FBRztzQkFBWCxLQUFLO2dCQUdHLEdBQUc7c0JBQVgsS0FBSztnQkFHRyxXQUFXO3NCQUFuQixLQUFLO2dCQUtHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBSUcsU0FBUztzQkFBakIsS0FBSztnQkFJSSxLQUFLO3NCQUFkLE1BQU07Z0JBRUcsTUFBTTtzQkFBZixNQUFNO2dCQUU2QixVQUFVO3NCQUE3QyxXQUFXO3VCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBIb3N0QmluZGluZyxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgT25Jbml0LFxyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgYW5pbWF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgaW1hZ2VGYWlsZWRTdmcgfSBmcm9tICcuL3N2Zy1hc3NldHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LWltYWdlJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBhbmltYXRpb25zOiBbXHJcbiAgICB0cmlnZ2VyKCdmYWRlSW4nLCBbXHJcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gc3VjY2VzcycsIFtcclxuICAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDAgfSksXHJcbiAgICAgICAgYW5pbWF0ZSgnMzAwbXMgZWFzZS1pbicsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSlcclxuICAgICAgXSlcclxuICAgIF0pXHJcbiAgXSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRhaW5lciBbbmdTd2l0Y2hdPVwic3RhdGVcIj5cclxuICAgICAgPGltZyBbQGZhZGVJbl09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgW3NyY109XCJzcmNcIlxyXG4gICAgICAgICAgIFthdHRyLmFsdF09XCJhbHRcIlxyXG4gICAgICAgICAgIFthdHRyLmxvYWRpbmddPVwibG9hZGluZ0F0dHJcIlxyXG4gICAgICAgICAgIFtzdHlsZS52aXNpYmlsaXR5XT1cInN0YXRlID09PSAnc3VjY2VzcycgPyAndmlzaWJsZScgOiAnaGlkZGVuJ1wiXHJcbiAgICAgICAgICAgY2xhc3M9XCJnLWltYWdlLWl0ZW1cIlxyXG4gICAgICAgICAgIChsb2FkKT1cInN0YXRlID0gJ3N1Y2Nlc3MnOyBsb2FkZWQuZW1pdCgpXCJcclxuICAgICAgICAgICAoZXJyb3IpPVwic3RhdGUgPSAnZmFpbGVkJzsgZXJyb3IuZW1pdCgkZXZlbnQpXCIvPlxyXG5cclxuICAgICAgPGRpdiAqbmdTd2l0Y2hDYXNlPVwiJ2ZhaWxlZCdcIlxyXG4gICAgICAgICAgIGNsYXNzPVwiZy1pbWFnZS1lcnJvci1tZXNzYWdlXCI+XHJcbiAgICAgICAgPGRpdiAqbmdJZj1cImVycm9yVGVtcGxhdGU7IGVsc2UgZGVmYXVsdEVycm9yXCJcclxuICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwiZXJyb3JUZW1wbGF0ZVwiPjwvZGl2PlxyXG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdEVycm9yPlxyXG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzVGh1bWJuYWlsOyBlbHNlIGlzTGFyZ2VcIj5cclxuICAgICAgICAgICAgPGg0PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnYWxsZXJ5LXRodW1iLWVycm9yXCIgW2lubmVySFRNTF09XCJlcnJvclN2Z1wiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2g0PlxyXG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICA8bmctdGVtcGxhdGUgI2lzTGFyZ2U+XHJcbiAgICAgICAgICAgIDxoMj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ2FsbGVyeS1pbWFnZS1lcnJvclwiIFtpbm5lckhUTUxdPVwiZXJyb3JTdmdcIj48L2Rpdj5cclxuICAgICAgICAgICAgPC9oMj5cclxuICAgICAgICAgICAgPHA+VW5hYmxlIHRvIGxvYWQgdGhlIGltYWdlITwvcD5cclxuICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaENhc2U9XCInbG9hZGluZydcIj5cclxuICAgICAgICA8ZGl2ICpuZ0lmPVwibG9hZGVyVGVtcGxhdGU7IGVsc2UgZGVmYXVsdExvYWRlclwiXHJcbiAgICAgICAgICAgICBjbGFzcz1cImctbG9hZGluZ1wiXHJcbiAgICAgICAgICAgICBbaW5uZXJIVE1MXT1cImxvYWRlclRlbXBsYXRlXCI+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPG5nLXRlbXBsYXRlICNkZWZhdWx0TG9hZGVyPlxyXG4gICAgICAgICAgPGRpdiAqbmdJZj1cImlzVGh1bWJuYWlsXCIgY2xhc3M9XCJnLXRodW1iLWxvYWRpbmdcIj48L2Rpdj5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gIGBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5SW1hZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBzdGF0ZTogJ2xvYWRpbmcnIHwgJ3N1Y2Nlc3MnIHwgJ2ZhaWxlZCcgPSAnbG9hZGluZyc7XHJcblxyXG4gIC8qKiBQcm9ncmVzcyB2YWx1ZSAqL1xyXG4gIHByb2dyZXNzOiBudW1iZXIgPSAwO1xyXG5cclxuICAvKiogSXMgdGh1bWJuYWlsICovXHJcbiAgQElucHV0KCkgaXNUaHVtYm5haWw6IGJvb2xlYW47XHJcblxyXG4gIC8qKiBJbWFnZSBsb2FkaW5nIGF0dHJpYnV0ZSAqL1xyXG4gIEBJbnB1dCgpIGxvYWRpbmdBdHRyOiAnZWFnZXInIHwgJ2xhenknO1xyXG5cclxuICAvKiogSW1hZ2UgYWx0ICovXHJcbiAgQElucHV0KCkgYWx0OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBJbWFnZSBzb3VyY2UgVVJMICovXHJcbiAgQElucHV0KCkgc3JjOiBzdHJpbmdcclxuXHJcbiAgLyoqIEN1c3RvbSBsb2FkZXIgdGVtcGxhdGUgKi9cclxuICBASW5wdXQoKSBsb2FkaW5nSWNvbjogc3RyaW5nO1xyXG4gIC8qKiBDdXN0b20gbG9hZGVyIHNhZmUgdGVtcGxhdGUgKi9cclxuICBsb2FkZXJUZW1wbGF0ZTogU2FmZUh0bWw7XHJcblxyXG4gIC8qKiBDdXN0b20gZXJyb3IgdGVtcGxhdGUgKi9cclxuICBASW5wdXQoKSBsb2FkaW5nRXJyb3I6IHN0cmluZztcclxuICAvKiogQ3VzdG9tIGVycm9yIHNhZmUgdGVtcGxhdGUgKi9cclxuICBlcnJvclRlbXBsYXRlOiBTYWZlSHRtbDtcclxuXHJcbiAgQElucHV0KCkgZXJyb3JJY29uOiBzdHJpbmcgPSBpbWFnZUZhaWxlZFN2ZztcclxuICBlcnJvclN2ZzogU2FmZUh0bWw7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3JFdmVudD4oKTtcclxuXHJcbiAgQE91dHB1dCgpIGxvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmltYWdlU3RhdGUnKSBnZXQgaW1hZ2VTdGF0ZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGU7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9zYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5sb2FkaW5nSWNvbikge1xyXG4gICAgICB0aGlzLmxvYWRlclRlbXBsYXRlID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHRoaXMubG9hZGluZ0ljb24pO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubG9hZGluZ0Vycm9yKSB7XHJcbiAgICAgIHRoaXMuZXJyb3JUZW1wbGF0ZSA9IHRoaXMuX3Nhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLmxvYWRpbmdFcnJvcik7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5lcnJvckljb24pIHtcclxuICAgICAgdGhpcy5lcnJvclN2ZyA9IHRoaXMuX3Nhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLmVycm9ySWNvbik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==