import { Component, Input, Output, ViewChild, ViewChildren, QueryList, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, takeUntil, tap } from 'rxjs/operators';
import { ThumbnailsPosition, ThumbnailsView } from '../models/constants';
import { HorizontalThumbAdapter, VerticalThumbAdapter } from './adapters';
import { resizeObservable } from '../utils/resize-observer';
import { GalleryThumbComponent } from './gallery-thumb.component';
import * as i0 from "@angular/core";
import * as i1 from "../smooth-scroll";
import * as i2 from "@angular/cdk/platform";
import * as i3 from "@angular/common";
import * as i4 from "./gallery-thumb.component";
export class GalleryThumbsComponent {
    constructor(_el, _zone, _smoothScroll, _cd, _platform) {
        this._el = _el;
        this._zone = _zone;
        this._smoothScroll = _smoothScroll;
        this._cd = _cd;
        this._platform = _platform;
        /** Thumbnails view enum */
        this.thumbnailsView = ThumbnailsView;
        this._destroyed$ = new Subject();
        /** Stream that emits when thumb is clicked */
        this.thumbClick = new EventEmitter();
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
        this.items = new QueryList();
    }
    get slider() {
        return this.sliderEl.nativeElement;
    }
    ngOnChanges(changes) {
        if (changes.config) {
            // Sets sliding direction
            if (changes.config.currentValue?.thumbPosition !== changes.config.previousValue?.thumbPosition) {
                switch (this.config.thumbPosition) {
                    case ThumbnailsPosition.Right:
                    case ThumbnailsPosition.Left:
                        this.adapter = new VerticalThumbAdapter(this.slider, this.config);
                        break;
                    case ThumbnailsPosition.Top:
                    case ThumbnailsPosition.Bottom:
                        this.adapter = new HorizontalThumbAdapter(this.slider, this.config);
                        break;
                }
                if (this._platform.isBrowser) {
                    if (!changes.config.firstChange) {
                        // Keep the correct sliding position when direction changes
                        requestAnimationFrame(() => {
                            this.scrollToIndex(this.state.currIndex, 'auto');
                        });
                    }
                    // Reactivate gestures
                    this.enableDisableGestures();
                }
            }
            if (this._platform.isBrowser) {
                if (!changes.config.firstChange && changes.config.currentValue?.thumbMouseSlidingDisabled !== changes.config.previousValue?.thumbMouseSlidingDisabled) {
                    this.enableDisableGestures();
                }
                this.slider.style.setProperty('--thumb-height', `${this.config.thumbHeight}px`);
                this.slider.style.setProperty('--thumb-width', `${this.config.thumbWidth}px`);
            }
        }
        if (this._platform.isBrowser && changes.state && (changes.state.firstChange || !this.config.thumbDetached)) {
            if (changes.state.currentValue?.currIndex !== changes.state.previousValue?.currIndex) {
                // Scroll slide to item when current index changes.
                requestAnimationFrame(() => {
                    this.scrollToIndex(this.state.currIndex, changes.state?.firstChange ? 'auto' : 'smooth');
                });
            }
        }
    }
    ngAfterViewInit() {
        if (this._platform.isBrowser) {
            // Workaround: opening a lightbox (centralised) with last index active, show in wrong position
            setTimeout(() => this.scrollToIndex(this.state.currIndex, 'auto'), 200);
            this._zone.runOutsideAngular(() => {
                // Update necessary calculation on host resize
                resizeObservable(this._el.nativeElement).pipe(debounceTime(this.config.resizeDebounceTime), tap(() => {
                    // Update thumb centralize size
                    const el = this.items.get(this.state.currIndex)?.nativeElement;
                    if (el) {
                        this.slider.style.setProperty('--thumb-centralize-start-size', this.adapter.getCentralizerStartSize() + 'px');
                        this.slider.style.setProperty('--thumb-centralize-end-size', this.adapter.getCentralizerEndSize() + 'px');
                    }
                    this._cd.detectChanges();
                    this.scrollToIndex(this.state.currIndex, 'auto');
                }), takeUntil(this._destroyed$)).subscribe();
            });
        }
    }
    ngAfterViewChecked() {
        const el = this.items.get(this.state.currIndex)?.nativeElement;
        if (el && this._platform.isBrowser) {
            this.slider.style.setProperty('--thumb-centralize-start-size', this.adapter.getCentralizerStartSize() + 'px');
            this.slider.style.setProperty('--thumb-centralize-end-size', this.adapter.getCentralizerEndSize() + 'px');
        }
    }
    ngOnDestroy() {
        this.deactivateGestures();
        this._destroyed$.next();
        this._destroyed$.complete();
    }
    trackByFn(index, item) {
        return item.type;
    }
    scrollToIndex(value, behavior) {
        this._zone.runOutsideAngular(() => {
            this.slider.style.scrollSnapType = 'unset';
            const el = this.items.get(value)?.nativeElement;
            if (el) {
                this._smoothScroll.scrollTo(this.slider, this.adapter.getScrollToValue(el, behavior)).then(() => {
                    this.slider.style.scrollSnapType = this.adapter.scrollSnapType;
                });
            }
        });
    }
    enableDisableGestures() {
        if (!this._platform.IOS && !this._platform.ANDROID) {
            // Enable/Disable mouse sliding on desktop browser only
            if (!this.config.thumbMouseSlidingDisabled) {
                this.activateGestures();
            }
            else {
                this.deactivateGestures();
            }
        }
    }
    activateGestures() {
        if (typeof Hammer !== 'undefined' && !this.config.disableThumb) {
            const direction = this.adapter.panDirection;
            // Activate gestures
            this._zone.runOutsideAngular(() => {
                this._hammer = new Hammer(this._el.nativeElement, { inputClass: Hammer.MouseInput });
                this._hammer.get('pan').set({ direction });
                let panOffset = 0;
                this._hammer.on('panstart', () => {
                    panOffset = this.adapter.scrollValue;
                    // Disable scroll-snap-type functionality
                    this.slider.style.scrollSnapType = 'unset';
                    this.slider.classList.add('g-sliding');
                });
                this._hammer.on('panmove', (e) => this.slider.scrollTo(this.adapter.getPanValue(panOffset, e, 'auto')));
                this._hammer.on('panend', () => {
                    // Enable scroll-snap-type functionality
                    this.slider.style.scrollSnapType = this.adapter.scrollSnapType;
                    this.slider.classList.remove('g-sliding');
                });
            });
        }
    }
    deactivateGestures() {
        this._hammer?.destroy();
    }
}
GalleryThumbsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: GalleryThumbsComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.SmoothScrollManager }, { token: i0.ChangeDetectorRef }, { token: i2.Platform }], target: i0.ɵɵFactoryTarget.Component });
GalleryThumbsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.5", type: GalleryThumbsComponent, selector: "gallery-thumbs", inputs: { state: "state", config: "config" }, outputs: { thumbClick: "thumbClick", error: "error" }, viewQueries: [{ propertyName: "sliderEl", first: true, predicate: ["slider"], descendants: true, static: true }, { propertyName: "items", predicate: GalleryThumbComponent, descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: `
    <div #slider
         class="g-slider"
         [attr.centralised]="config.thumbView === thumbnailsView.Contain || adapter.isContentLessThanContainer">
      <div class="g-slider-content">
        <gallery-thumb *ngFor="let item of state.items; trackBy: trackByFn; index as i"
                       [type]="item.type"
                       [config]="config"
                       [data]="item.data"
                       [currIndex]="state.currIndex"
                       [index]="i"
                       (click)="config.disableThumb ? null : thumbClick.emit(i)"
                       (error)="error.emit({ itemIndex: i, error: $event })">
        </gallery-thumb>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i4.GalleryThumbComponent, selector: "gallery-thumb", inputs: ["config", "index", "currIndex", "type", "data"], outputs: ["error"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: GalleryThumbsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-thumbs',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div #slider
         class="g-slider"
         [attr.centralised]="config.thumbView === thumbnailsView.Contain || adapter.isContentLessThanContainer">
      <div class="g-slider-content">
        <gallery-thumb *ngFor="let item of state.items; trackBy: trackByFn; index as i"
                       [type]="item.type"
                       [config]="config"
                       [data]="item.data"
                       [currIndex]="state.currIndex"
                       [index]="i"
                       (click)="config.disableThumb ? null : thumbClick.emit(i)"
                       (error)="error.emit({ itemIndex: i, error: $event })">
        </gallery-thumb>
      </div>
    </div>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.SmoothScrollManager }, { type: i0.ChangeDetectorRef }, { type: i2.Platform }]; }, propDecorators: { state: [{
                type: Input
            }], config: [{
                type: Input
            }], thumbClick: [{
                type: Output
            }], error: [{
                type: Output
            }], sliderEl: [{
                type: ViewChild,
                args: ['slider', { static: true }]
            }], items: [{
                type: ViewChildren,
                args: [GalleryThumbComponent, { read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,